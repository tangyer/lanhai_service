<?php
declare (strict_types = 1);

namespace app\merchant\logic;
use app\common\logic\BaseLogic;
use app\merchant\model\OrderId;

class ActiveCode extends BaseLogic
{
    public function getList(array $where = [])
    {
        return parent::getList($where)->each(function ($item) {
            $item->expire_time = date('Y-m-d H:i:s', $item->expire_time);
        }); // TODO: Change the autogenerated stub
    }

    public function create(array $data = []): bool
    {
        $this->validate($data);

        $data['active_code'] = $this->generateActiveCode(); // 需查重
        $platform = $data['platform'];
        $data['platform'] = implode(',', $platform);
        $portNum = $data['port_num'] ?? 0;
        $totalNum = get_user('port_num');
        if ($portNum > $totalNum){
            $this->validateError('端口数量 不得大于' . $totalNum);
        }
        $data['expire_time'] = strtotime( $data['expire_time']);
        $this->model->save($data); // 创建激活码
        $count = count($platform);
        $num = $portNum / $count;
        // 自动创建工单
        foreach ($platform as $item){
            \app\merchant\model\WorkOrder::create([
                'merchant_id' => $data['merchant_id'],
                'order_code' => $this->generateOrderCode(),
                'active_code' => $data['active_code'],
                'order_name' => $item,
                'platform' => $item,
                'clean_time' => $data['clean_time'],
                'port_num' =>(int)$num,
                'status' => 1
            ]);
        }
        return true;
    }

    public function update(array $data = []): bool
    {
        $this->validate($data);
        $portNum = $data['port_num'] ?? 0;
        $totalNum = get_user('port_num');
        if ($portNum > $totalNum){
            $this->validateError('端口数量 不得大于' . $totalNum);
        }
        $platform = $data['platform'];
        $data['platform'] = implode(',', $platform);

        $data['expire_time'] = strtotime( $data['expire_time']);
        $id = $data['id'] ?? 0;
        if ($id){
            $model = $this->findOneById((int)$id);
            // 端口号修改或者 平台修改
            if ($model->port_num != $portNum || $model->platform !=  $data['platform']){
                $count = count($platform);
                $num = $portNum / $count; // 重新分配端口数
                \app\merchant\model\WorkOrder::where(['active_code' => $model->active_code] )->select()->each(function ($item) use ($num){
                    $item->port_num = $num;
                    $item->save();
                });

            }
            return $model->save($data);
        }
        return false;
    }


    private function generateOrderCode()
    {
        $time = substr(date('Ymd'),2);
        $code = 'GD'. $time;
        $id = OrderId::create(['use_date' => $time])->id;
        return $code.str_pad((string)$id, 4, '0', STR_PAD_LEFT);
    }

    private function generateActiveCode()
    {
        $code = strtoupper(generate_rand_str(10));
        if ($this->findOne(['active_code' => $code],false)){
            return $this->generateActiveCode();
        }
        return $code;
    }

    /**
     * 根据id删除数据
     * @param integer|array $id
     * @return boolean
     */
    public function delete($id): bool
    {
        $activeCode = $this->getFieldValue(['id' => $id], 'active_code');
        $res = $this->model->deleteById($id);
        // 删除激活码对应的工单
        \app\merchant\model\WorkOrder::where(['active_code' => $activeCode])->update(['deleted' => 1]);
        $this->after();
        return $res;
    }

}
