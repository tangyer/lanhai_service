<?php
declare (strict_types = 1);

namespace app\admin\logic;
use app\common\logic\BaseLogic;

class User extends BaseLogic
{
    /**
     * 设置状态
     * @param $id
     * @param $status
     * @return void
     * @throws \think\db\exception\DataNotFoundException
     */
    public function setStatus($id,$status){
        $this->model->setFieldValue(['id' => $id],'status',$status);
    }

    public function getList(array $where = [])
    {
        return parent::getList($where)->each(function ($item){
            $item->last_login_time = $item->last_login_time > 0 ? get_date($item->last_login_time) : 0;
            $item->last_login_ip = $item->last_login_ip > 0 ? long2ip($item->last_login_ip) : 0;
        }); // TODO: Change the autogenerated stub
    }

    /**
     * 添加数据
     * @param array $data
     * @return bool
     */
    public function create(array $data = []) : bool{
        $this->validate($data);
        if ($this->findByUsername($data['username'])){
            $this->validateError('该用户名已存在');
        }

        $password = $data['password'];
        unset($data['password']);
        $this->model->generatePassword($password);
        $this->model->generateToken();

        return $this->model->save($data);
    }

    /**
     * 修改数据
     * @param array $data
     */
    public function update(array $data = []) : bool{
        $this->validate($data,'edit');
        $id = (int) $data['id'] ?: 0;
        if ($id){
            $model = $this->findOneById($id);
            $model->generateToken();
            return $model->save($data);
        }
        return false;
    }

    /**
     * 重置密码
     * @param  $id
     * @return mixed
     */
    public function resetPassword($id,$password = ''){
        $model = $this->findOneById($id);
        $model->generatePassword($password);
        $model->generateToken();
       return $model->save();
    }
    /**
     * 修改密码
     * @param array $data
     * @return bool
     */
    public function updatePassword(array $data){
        if (empty($data['password'])){
            $this->validateError('密码不能为空');
        }
        if ($data['password'] != $data['confirm_password']){
            $this->validateError('两次密码不一致');
        }
        $user = $this->findOneById((int) get_user_id());
        $user->generatePassword($data['password']);
        $user->token = generate_token();
        return $user->save();
    }

    /**
     * 根据用户名获取用户
     * @param string $username
     * @return mixed
     */
    public function findByUsername(string $username){
        return $this->findOne(['username' => $username],false);
    }
}
